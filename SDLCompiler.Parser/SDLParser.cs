//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SDL.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SDLCompiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SDLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Bool=1, Char=2, Decimal=3, Double=4, Float=5, Int=6, Long=7, Model=8, 
		Service=9, Short=10, String=11, Void=12, Question=13, Comma=14, Colon=15, 
		Semicolon=16, LeftParen=17, RightParen=18, LeftBracket=19, RightBracket=20, 
		LeftBrace=21, RightBrace=22, LeftAngle=23, RightAngle=24, Identifier=25, 
		Whitespace=26, Newline=27, BlockComment=28, LineComment=29;
	public const int
		RULE_file = 0, RULE_declaration = 1, RULE_modelDeclaration = 2, RULE_modelMember = 3, 
		RULE_serviceDeclaration = 4, RULE_serviceMethod = 5, RULE_methodParameterList = 6, 
		RULE_methodParameter = 7, RULE_typeOrVoid = 8, RULE_type = 9, RULE_arrayType = 10, 
		RULE_basicType = 11, RULE_modelType = 12, RULE_internalType = 13;
	public static readonly string[] ruleNames = {
		"file", "declaration", "modelDeclaration", "modelMember", "serviceDeclaration", 
		"serviceMethod", "methodParameterList", "methodParameter", "typeOrVoid", 
		"type", "arrayType", "basicType", "modelType", "internalType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'bool'", "'char'", "'decimal'", "'double'", "'float'", "'int'", 
		"'long'", "'model'", "'service'", "'short'", "'string'", "'void'", "'?'", 
		"','", "':'", "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", 
		"'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Bool", "Char", "Decimal", "Double", "Float", "Int", "Long", "Model", 
		"Service", "Short", "String", "Void", "Question", "Comma", "Colon", "Semicolon", 
		"LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
		"RightBrace", "LeftAngle", "RightAngle", "Identifier", "Whitespace", "Newline", 
		"BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SDL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SDLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SDLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SDLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SDLParser.Eof, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Model || _la==Service) {
				{
				{
				State = 28; declaration();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ModelDeclarationContext modelDeclaration() {
			return GetRuleContext<ModelDeclarationContext>(0);
		}
		public ServiceDeclarationContext serviceDeclaration() {
			return GetRuleContext<ServiceDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Model:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; modelDeclaration();
				}
				break;
			case Service:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; serviceDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelDeclarationContext : ParserRuleContext {
		public ITerminalNode Model() { return GetToken(SDLParser.Model, 0); }
		public ITerminalNode Identifier() { return GetToken(SDLParser.Identifier, 0); }
		public ITerminalNode LeftBrace() { return GetToken(SDLParser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(SDLParser.RightBrace, 0); }
		public ModelMemberContext[] modelMember() {
			return GetRuleContexts<ModelMemberContext>();
		}
		public ModelMemberContext modelMember(int i) {
			return GetRuleContext<ModelMemberContext>(i);
		}
		public ModelDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelDeclarationContext modelDeclaration() {
		ModelDeclarationContext _localctx = new ModelDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_modelDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(Model);
			State = 41; Match(Identifier);
			State = 42; Match(LeftBrace);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Bool) | (1L << Char) | (1L << Decimal) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Identifier))) != 0)) {
				{
				{
				State = 43; modelMember();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelMemberContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(SDLParser.Identifier, 0); }
		public ITerminalNode Semicolon() { return GetToken(SDLParser.Semicolon, 0); }
		public ModelMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelMember; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelMemberContext modelMember() {
		ModelMemberContext _localctx = new ModelMemberContext(Context, State);
		EnterRule(_localctx, 6, RULE_modelMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; type();
			State = 52; Match(Identifier);
			State = 53; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceDeclarationContext : ParserRuleContext {
		public ITerminalNode Service() { return GetToken(SDLParser.Service, 0); }
		public ITerminalNode Identifier() { return GetToken(SDLParser.Identifier, 0); }
		public ITerminalNode LeftBrace() { return GetToken(SDLParser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(SDLParser.RightBrace, 0); }
		public ServiceMethodContext[] serviceMethod() {
			return GetRuleContexts<ServiceMethodContext>();
		}
		public ServiceMethodContext serviceMethod(int i) {
			return GetRuleContext<ServiceMethodContext>(i);
		}
		public ServiceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceDeclarationContext serviceDeclaration() {
		ServiceDeclarationContext _localctx = new ServiceDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_serviceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(Service);
			State = 56; Match(Identifier);
			State = 57; Match(LeftBrace);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Bool) | (1L << Char) | (1L << Decimal) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Void) | (1L << Identifier))) != 0)) {
				{
				{
				State = 58; serviceMethod();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceMethodContext : ParserRuleContext {
		public TypeOrVoidContext typeOrVoid() {
			return GetRuleContext<TypeOrVoidContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(SDLParser.Identifier, 0); }
		public ITerminalNode LeftParen() { return GetToken(SDLParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(SDLParser.RightParen, 0); }
		public ITerminalNode Semicolon() { return GetToken(SDLParser.Semicolon, 0); }
		public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public ServiceMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceMethod; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceMethodContext serviceMethod() {
		ServiceMethodContext _localctx = new ServiceMethodContext(Context, State);
		EnterRule(_localctx, 10, RULE_serviceMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; typeOrVoid();
			State = 67; Match(Identifier);
			State = 68; Match(LeftParen);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Bool) | (1L << Char) | (1L << Decimal) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String) | (1L << Identifier))) != 0)) {
				{
				State = 69; methodParameterList(0);
				}
			}

			State = 72; Match(RightParen);
			State = 73; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodParameterListContext : ParserRuleContext {
		public MethodParameterContext methodParameter() {
			return GetRuleContext<MethodParameterContext>(0);
		}
		public MethodParameterListContext methodParameterList() {
			return GetRuleContext<MethodParameterListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(SDLParser.Comma, 0); }
		public MethodParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameterList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterListContext methodParameterList() {
		return methodParameterList(0);
	}

	private MethodParameterListContext methodParameterList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MethodParameterListContext _localctx = new MethodParameterListContext(Context, _parentState);
		MethodParameterListContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_methodParameterList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 76; methodParameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 83;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MethodParameterListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_methodParameterList);
					State = 78;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 79; Match(Comma);
					State = 80; methodParameter();
					}
					} 
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MethodParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(SDLParser.Identifier, 0); }
		public MethodParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodParameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodParameterContext methodParameter() {
		MethodParameterContext _localctx = new MethodParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; type();
			State = 87; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOrVoidContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Void() { return GetToken(SDLParser.Void, 0); }
		public TypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOrVoid; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOrVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOrVoidContext typeOrVoid() {
		TypeOrVoidContext _localctx = new TypeOrVoidContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeOrVoid);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case Char:
			case Decimal:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; type();
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; Match(Void);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BasicTypeContext basicType() {
			return GetRuleContext<BasicTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_type);
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; basicType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public BasicTypeContext basicType() {
			return GetRuleContext<BasicTypeContext>(0);
		}
		public ITerminalNode[] LeftBracket() { return GetTokens(SDLParser.LeftBracket); }
		public ITerminalNode LeftBracket(int i) {
			return GetToken(SDLParser.LeftBracket, i);
		}
		public ITerminalNode[] RightBracket() { return GetTokens(SDLParser.RightBracket); }
		public ITerminalNode RightBracket(int i) {
			return GetToken(SDLParser.RightBracket, i);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_arrayType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; basicType();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 98; Match(LeftBracket);
				State = 99; Match(RightBracket);
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LeftBracket );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicTypeContext : ParserRuleContext {
		public InternalTypeContext internalType() {
			return GetRuleContext<InternalTypeContext>(0);
		}
		public ModelTypeContext modelType() {
			return GetRuleContext<ModelTypeContext>(0);
		}
		public BasicTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicTypeContext basicType() {
		BasicTypeContext _localctx = new BasicTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_basicType);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case Char:
			case Decimal:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; internalType();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; modelType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(SDLParser.Identifier, 0); }
		public ModelTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelTypeContext modelType() {
		ModelTypeContext _localctx = new ModelTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_modelType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalTypeContext : ParserRuleContext {
		public ITerminalNode Bool() { return GetToken(SDLParser.Bool, 0); }
		public ITerminalNode Char() { return GetToken(SDLParser.Char, 0); }
		public ITerminalNode Decimal() { return GetToken(SDLParser.Decimal, 0); }
		public ITerminalNode Double() { return GetToken(SDLParser.Double, 0); }
		public ITerminalNode Float() { return GetToken(SDLParser.Float, 0); }
		public ITerminalNode Int() { return GetToken(SDLParser.Int, 0); }
		public ITerminalNode Long() { return GetToken(SDLParser.Long, 0); }
		public ITerminalNode Short() { return GetToken(SDLParser.Short, 0); }
		public ITerminalNode String() { return GetToken(SDLParser.String, 0); }
		public InternalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISDLVisitor<TResult> typedVisitor = visitor as ISDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalTypeContext internalType() {
		InternalTypeContext _localctx = new InternalTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_internalType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Bool) | (1L << Char) | (1L << Decimal) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << String))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return methodParameterList_sempred((MethodParameterListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool methodParameterList_sempred(MethodParameterListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', 's', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '/', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '\x32', '\v', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '>', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '\x41', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'I', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'T', '\n', '\b', '\f', '\b', '\xE', '\b', 'W', '\v', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '^', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x62', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x6', '\f', 'g', '\n', '\f', '\r', 
		'\f', '\xE', '\f', 'h', '\x3', '\r', '\x3', '\r', '\x5', '\r', 'm', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x2', '\x3', '\xE', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x3', 
		'\x4', '\x2', '\x3', '\t', '\f', '\r', '\x2', 'n', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '(', '\x3', '\x2', '\x2', '\x2', '\x6', '*', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x39', '\x3', '\x2', '\x2', '\x2', '\f', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'M', '\x3', '\x2', '\x2', '\x2', '\x10', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\x12', ']', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x16', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x18', 'l', '\x3', '\x2', '\x2', '\x2', '\x1A', 'n', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', 'p', '\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\x5', 
		'\x4', '\x3', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', 
		'#', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\x3', '\x2', '\x2', 
		'\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\x2', '\x2', 
		'\x3', '%', '\x3', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x5', '\x6', 
		'\x4', '\x2', '\'', ')', '\x5', '\n', '\x6', '\x2', '(', '&', '\x3', '\x2', 
		'\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\a', '\n', '\x2', '\x2', '+', ',', '\a', 
		'\x1B', '\x2', '\x2', ',', '\x30', '\a', '\x17', '\x2', '\x2', '-', '/', 
		'\x5', '\b', '\x5', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '/', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\x18', '\x2', '\x2', '\x34', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x5', '\x14', '\v', '\x2', '\x36', '\x37', '\a', 
		'\x1B', '\x2', '\x2', '\x37', '\x38', '\a', '\x12', '\x2', '\x2', '\x38', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\v', '\x2', '\x2', 
		':', ';', '\a', '\x1B', '\x2', '\x2', ';', '?', '\a', '\x17', '\x2', '\x2', 
		'<', '>', '\x5', '\f', '\a', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\x18', '\x2', '\x2', '\x43', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\x5', '\x12', '\n', '\x2', '\x45', '\x46', '\a', '\x1B', 
		'\x2', '\x2', '\x46', 'H', '\a', '\x13', '\x2', '\x2', 'G', 'I', '\x5', 
		'\xE', '\b', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', 
		'\x14', '\x2', '\x2', 'K', 'L', '\a', '\x12', '\x2', '\x2', 'L', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'M', 'N', '\b', '\b', '\x1', '\x2', 'N', 'O', 
		'\x5', '\x10', '\t', '\x2', 'O', 'U', '\x3', '\x2', '\x2', '\x2', 'P', 
		'Q', '\f', '\x3', '\x2', '\x2', 'Q', 'R', '\a', '\x10', '\x2', '\x2', 
		'R', 'T', '\x5', '\x10', '\t', '\x2', 'S', 'P', '\x3', '\x2', '\x2', '\x2', 
		'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x5', '\x14', 
		'\v', '\x2', 'Y', 'Z', '\a', '\x1B', '\x2', '\x2', 'Z', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '[', '^', '\x5', '\x14', '\v', '\x2', '\\', '^', 
		'\a', '\xE', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', ']', 
		'\\', '\x3', '\x2', '\x2', '\x2', '^', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'_', '\x62', '\x5', '\x18', '\r', '\x2', '`', '\x62', '\x5', '\x16', '\f', 
		'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x15', '\x3', '\x2', '\x2', '\x2', '\x63', '\x66', 
		'\x5', '\x18', '\r', '\x2', '\x64', '\x65', '\a', '\x15', '\x2', '\x2', 
		'\x65', 'g', '\a', '\x16', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', '\x17', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x5', '\x1C', '\xF', '\x2', 'k', 
		'm', '\x5', '\x1A', '\xE', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', '\x19', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\a', '\x1B', '\x2', '\x2', 'o', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\t', '\x2', '\x2', '\x2', 'q', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\f', '!', '(', '\x30', '?', 'H', 'U', ']', '\x61', 
		'h', 'l',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SDLCompiler.Parser
